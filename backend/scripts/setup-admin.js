/**
 * Script complet de setup pour l'administrateur
 * 
 * Ce script :
 * 1. Ajoute les timestamps aux tables si n√©cessaire
 * 2. Cr√©e le r√¥le admin s'il n'existe pas
 * 3. Cr√©e le compte administrateur
 * 
 * Usage: node scripts/setup-admin.js
 */

require('dotenv').config();
const { Sequelize } = require('sequelize');
const bcrypt = require('bcrypt');

// Configuration de la base de donn√©es
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASS,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT || 5432,
    dialect: 'postgres',
    logging: false
  }
);

async function setupAdmin() {
  const transaction = await sequelize.transaction();
  
  try {
    console.log('üöÄ D√©marrage du setup administrateur...');
    console.log('üìã Configuration:');
    console.log(`   - Email: ${process.env.ADMIN_EMAIL || 'NON D√âFINI'}`);
    console.log(`   - Nom: ${process.env.ADMIN_NOM || 'NON D√âFINI'}`);
    console.log(`   - Pr√©nom: ${process.env.ADMIN_PRENOM || 'NON D√âFINI'}`);
    console.log(`   - Mot de passe: ${process.env.ADMIN_PWD ? '***D√âFINI***' : 'NON D√âFINI'}`);
    console.log('');

    // V√©rifier la connexion
    console.log('üîå Test de connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // √âtape 1: Ajouter les timestamps
    console.log('\nüîß √âtape 1: Pr√©paration des timestamps...');
    
    // V√©rifier et ajouter les timestamps √† la table compte
    const compteColumns = await sequelize.query(
      `SELECT column_name 
       FROM information_schema.columns 
       WHERE table_name = 'compte' AND column_name IN ('createdAt', 'updatedAt')`,
      { type: Sequelize.QueryTypes.SELECT, transaction }
    );
    
    if (compteColumns.length === 0) {
      console.log('‚ûï Ajout des timestamps √† la table compte...');
      await sequelize.query(
        `ALTER TABLE compte 
         ADD COLUMN "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         ADD COLUMN "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP`,
        { transaction }
      );
      console.log('‚úÖ Timestamps ajout√©s √† la table compte');
    } else {
      console.log('‚úÖ Timestamps d√©j√† pr√©sents dans la table compte');
    }
    
    // V√©rifier et ajouter les timestamps √† la table administrateur
    const adminColumns = await sequelize.query(
      `SELECT column_name 
       FROM information_schema.columns 
       WHERE table_name = 'administrateur' AND column_name IN ('createdAt', 'updatedAt')`,
      { type: Sequelize.QueryTypes.SELECT, transaction }
    );
    
    if (adminColumns.length === 0) {
      console.log('‚ûï Ajout des timestamps √† la table administrateur...');
      await sequelize.query(
        `ALTER TABLE administrateur 
         ADD COLUMN "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         ADD COLUMN "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP`,
        { transaction }
      );
      console.log('‚úÖ Timestamps ajout√©s √† la table administrateur');
    } else {
      console.log('‚úÖ Timestamps d√©j√† pr√©sents dans la table administrateur');
    }

    // √âtape 2: Cr√©er le r√¥le admin s'il n'existe pas
    console.log('\nüëë √âtape 2: V√©rification du r√¥le admin...');
    
    const adminRole = await sequelize.query(
      'SELECT idRole FROM role WHERE nomRole = :roleName',
      {
        replacements: { roleName: 'admin' },
        type: Sequelize.QueryTypes.SELECT,
        transaction
      }
    );
    
    let roleId;
    if (adminRole.length === 0) {
      console.log('‚ûï Cr√©ation du r√¥le admin...');
      const [newRole] = await sequelize.query(
        'INSERT INTO role (nomRole) VALUES (:roleName) RETURNING idRole',
        {
          replacements: { roleName: 'admin' },
          type: Sequelize.QueryTypes.INSERT,
          transaction
        }
      );
      roleId = newRole[0].idRole;
      console.log('‚úÖ R√¥le admin cr√©√© avec l\'ID:', roleId);
    } else {
      roleId = adminRole[0].idRole;
      console.log('‚úÖ R√¥le admin trouv√© avec l\'ID:', roleId);
    }

    // √âtape 3: V√©rifier si un administrateur existe d√©j√†
    console.log('\nüîç √âtape 3: V√©rification de l\'existence d\'un administrateur...');
    
    const existingAdmin = await sequelize.query(
      `SELECT c.idCompte, c.email, a.idAdmin, a.nom, a.prenom 
       FROM compte c 
       INNER JOIN administrateur a ON c.idCompte = a.idCompte 
       INNER JOIN role r ON c.idRole = r.idRole 
       WHERE r.nomRole = 'admin'`,
      { type: Sequelize.QueryTypes.SELECT, transaction }
    );
    
    if (existingAdmin.length > 0) {
      console.log('‚ö†Ô∏è  Un administrateur existe d√©j√† :', existingAdmin[0]);
      console.log('‚úÖ Setup termin√© - Idempotence respect√©e');
      await transaction.commit();
      return;
    }

    // √âtape 4: V√©rifier les variables d'environnement
    console.log('\nüîê √âtape 4: Validation des variables d\'environnement...');
    
    const adminEmail = process.env.ADMIN_EMAIL;
    const adminPassword = process.env.ADMIN_PWD;
    const adminNom = process.env.ADMIN_NOM;
    const adminPrenom = process.env.ADMIN_PRENOM;
    
    if (!adminEmail || !adminPassword || !adminNom || !adminPrenom) {
      throw new Error('Variables d\'environnement manquantes. Veuillez d√©finir ADMIN_EMAIL, ADMIN_PWD, ADMIN_NOM et ADMIN_PRENOM dans votre fichier .env');
    }
    
    console.log('‚úÖ Variables d\'environnement valid√©es');

    // √âtape 5: V√©rifier l'unicit√© de l'email
    console.log('\nüìß √âtape 5: V√©rification de l\'unicit√© de l\'email...');
    
    const existingEmail = await sequelize.query(
      'SELECT idCompte FROM compte WHERE email = :email',
      {
        replacements: { email: adminEmail },
        type: Sequelize.QueryTypes.SELECT,
        transaction
      }
    );
    
    if (existingEmail.length > 0) {
      throw new Error(`Un compte avec l'email ${adminEmail} existe d√©j√†.`);
    }
    
    console.log('‚úÖ Email unique valid√©');

    // √âtape 6: Cr√©er le compte administrateur
    console.log('\nüë§ √âtape 6: Cr√©ation du compte administrateur...');
    
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(adminPassword, saltRounds);
    console.log('‚úÖ Mot de passe hash√© avec succ√®s');
    
    const now = new Date();
    const compteData = {
      email: adminEmail,
      motDePasse: hashedPassword,
      statut: 'actif',
      idRole: roleId,
      createdAt: now,
      updatedAt: now
    };
    
    const [compteResult] = await sequelize.query(
      `INSERT INTO compte (email, "motDePasse", statut, "idRole", "createdAt", "updatedAt") 
       VALUES (:email, :motDePasse, :statut, :idRole, :createdAt, :updatedAt) 
       RETURNING "idCompte"`,
      {
        replacements: compteData,
        type: Sequelize.QueryTypes.INSERT,
        transaction
      }
    );
    
    const compteId = compteResult[0].idCompte;
    console.log('‚úÖ Compte cr√©√© avec l\'ID:', compteId);

    // √âtape 7: Cr√©er le profil administrateur
    console.log('\nüë®‚Äçüíº √âtape 7: Cr√©ation du profil administrateur...');
    
    const adminData = {
      nom: adminNom,
      prenom: adminPrenom,
      idCompte: compteId,
      createdAt: now,
      updatedAt: now
    };
    
    const [adminResult] = await sequelize.query(
      `INSERT INTO administrateur (nom, prenom, "idCompte", "createdAt", "updatedAt") 
       VALUES (:nom, :prenom, :idCompte, :createdAt, :updatedAt) 
       RETURNING "idAdmin"`,
      {
        replacements: adminData,
        type: Sequelize.QueryTypes.INSERT,
        transaction
      }
    );
    
    console.log('‚úÖ Administrateur cr√©√© avec l\'ID:', adminResult[0].idAdmin);

    // √âtape 8: Validation finale
    console.log('\nüîç √âtape 8: Validation finale...');
    
    const finalCheck = await sequelize.query(
      `SELECT c.email, c.statut, r.nomRole, a.nom, a.prenom 
       FROM compte c 
       INNER JOIN administrateur a ON c.idCompte = a.idCompte 
       INNER JOIN role r ON c.idRole = r.idRole 
       WHERE c.idCompte = :compteId`,
      {
        replacements: { compteId },
        type: Sequelize.QueryTypes.SELECT,
        transaction
      }
    );
    
    if (finalCheck.length === 0) {
      throw new Error('Erreur lors de la validation finale : l\'administrateur n\'a pas √©t√© cr√©√© correctement');
    }
    
    console.log('‚úÖ Validation finale r√©ussie');
    console.log('üéâ Administrateur cr√©√© avec succ√®s :', finalCheck[0]);
    
    await transaction.commit();
    console.log('\nüéâ Setup administrateur termin√© avec succ√®s !');
    console.log('\nüìù Informations de connexion:');
    console.log(`   Email: ${adminEmail}`);
    console.log(`   Mot de passe: ${adminPassword}`);
    console.log('\n‚ö†Ô∏è  IMPORTANT: Gardez ces informations en s√©curit√© !');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du setup administrateur:', error.message);
    await transaction.rollback();
    throw error;
  } finally {
    await sequelize.close();
    console.log('\nüîå Connexion √† la base de donn√©es ferm√©e');
  }
}

// Ex√©cuter le script
setupAdmin().catch(console.error); 