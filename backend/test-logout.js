/**
 * Script de test pour la fonctionnalit√© de d√©connexion
 * Teste l'endpoint de d√©connexion et la v√©rification des tokens r√©voqu√©s
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

// Configuration axios
const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json'
    }
});

// Variables globales pour stocker les donn√©es de test
let authToken = null;
let userData = null;

// ========== Fonction : testLogin ==========
async function testLogin() {
    console.log('üîê Test de connexion...');
    
    try {
        const response = await api.post('/auth/login', {
            email: 'admin@billettigue.com',
            password: 'Admin123!'
        });

        if (response.data.token) {
            authToken = response.data.token;
            userData = response.data.user;
            console.log('‚úÖ Connexion r√©ussie');
            console.log(`   Utilisateur: ${userData.firstName} ${userData.lastName}`);
            console.log(`   Email: ${userData.email}`);
            console.log(`   R√¥le: ${userData.role}`);
            return true;
        }
    } catch (error) {
        console.error('‚ùå Erreur de connexion:', error.response?.data?.message || error.message);
        return false;
    }
}

// ========== Fonction : testLogout ==========
async function testLogout() {
    console.log('\nüö™ Test de d√©connexion...');
    
    if (!authToken) {
        console.log('‚ùå Pas de token disponible pour la d√©connexion');
        return false;
    }

    try {
        const response = await api.post('/auth/logout', {}, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        console.log('‚úÖ D√©connexion r√©ussie');
        console.log(`   Message: ${response.data.message}`);
        return true;
    } catch (error) {
        console.error('‚ùå Erreur de d√©connexion:', error.response?.data?.message || error.message);
        return false;
    }
}

// ========== Fonction : testRevokedToken ==========
async function testRevokedToken() {
    console.log('\nüîí Test d\'acc√®s avec token r√©voqu√©...');
    
    if (!authToken) {
        console.log('‚ùå Pas de token disponible pour le test');
        return false;
    }

    try {
        // Essayer d'acc√©der √† une route prot√©g√©e avec le token r√©voqu√©
        const response = await api.get('/users/profile', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        console.log('‚ùå Le token r√©voqu√© fonctionne encore (probl√®me de s√©curit√©)');
        return false;
    } catch (error) {
        if (error.response?.status === 401) {
            console.log('‚úÖ Token correctement r√©voqu√© - acc√®s refus√©');
            console.log(`   Message: ${error.response.data.message}`);
            return true;
        } else {
            console.error('‚ùå Erreur inattendue:', error.response?.data?.message || error.message);
            return false;
        }
    }
}

// ========== Fonction : testNewLogin ==========
async function testNewLogin() {
    console.log('\nüîÑ Test de nouvelle connexion apr√®s d√©connexion...');
    
    try {
        const response = await api.post('/auth/login', {
            email: 'admin@billettigue.com',
            password: 'Admin123!'
        });

        if (response.data.token) {
            const newToken = response.data.token;
            console.log('‚úÖ Nouvelle connexion r√©ussie');
            console.log(`   Nouveau token: ${newToken.substring(0, 20)}...`);
            
            // Tester l'acc√®s avec le nouveau token
            const profileResponse = await api.get('/users/profile', {
                headers: {
                    'Authorization': `Bearer ${newToken}`
                }
            });

            console.log('‚úÖ Acc√®s avec nouveau token r√©ussi');
            return true;
        }
    } catch (error) {
        console.error('‚ùå Erreur de nouvelle connexion:', error.response?.data?.message || error.message);
        return false;
    }
}

// ========== Fonction principale ==========
async function runTests() {
    console.log('üß™ D√âMARRAGE DES TESTS DE D√âCONNEXION');
    console.log('=====================================\n');

    let allTestsPassed = true;

    // Test 1: Connexion
    const loginSuccess = await testLogin();
    if (!loginSuccess) {
        console.log('‚ùå Test de connexion √©chou√© - arr√™t des tests');
        return;
    }

    // Test 2: D√©connexion
    const logoutSuccess = await testLogout();
    if (!logoutSuccess) {
        allTestsPassed = false;
    }

    // Test 3: V√©rification du token r√©voqu√©
    const revokedTestSuccess = await testRevokedToken();
    if (!revokedTestSuccess) {
        allTestsPassed = false;
    }

    // Test 4: Nouvelle connexion
    const newLoginSuccess = await testNewLogin();
    if (!newLoginSuccess) {
        allTestsPassed = false;
    }

    // R√©sum√© des tests
    console.log('\nüìä R√âSUM√â DES TESTS');
    console.log('===================');
    
    if (allTestsPassed) {
        console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
        console.log('‚úÖ La fonctionnalit√© de d√©connexion fonctionne correctement');
    } else {
        console.log('‚ùå Certains tests ont √©chou√©');
        console.log('üîß V√©rifiez la configuration et les logs');
    }

    console.log('\nüìù Points v√©rifi√©s :');
    console.log('   - Connexion utilisateur');
    console.log('   - D√©connexion avec r√©vocation du token');
    console.log('   - V√©rification que le token r√©voqu√© ne fonctionne plus');
    console.log('   - Possibilit√© de se reconnecter apr√®s d√©connexion');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
    runTests().catch(error => {
        console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error);
        process.exit(1);
    });
}

module.exports = {
    testLogin,
    testLogout,
    testRevokedToken,
    testNewLogin,
    runTests
}; 