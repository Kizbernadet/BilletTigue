/**
 * Client API pour la gestion des trajets
 * G√®re les appels CRUD vers les endpoints de trajets
 */

import { CONFIG } from './config.js';

class TrajetsApi {
  constructor() {
    this.baseUrl = `${CONFIG.API_BASE_URL}/trajets`;
  }

  /**
   * Headers par d√©faut avec authentification
   */
  getHeaders() {
    const token = sessionStorage.getItem('authToken');
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : ''
    };
  }

  /**
   * Cr√©er un nouveau trajet
   * @param {Object} trajetData - Donn√©es du trajet selon le mod√®le DB
   * @returns {Promise<Object>} R√©ponse de l'API
   */
  async createTrajet(trajetData) {
    try {
      console.log('üöõ Cr√©ation d\'un trajet via API...', trajetData);
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: this.getHeaders(),
        body: JSON.stringify(trajetData)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajet cr√©√© avec succ√®s:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du trajet:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer tous les trajets du transporteur connect√©
   * @returns {Promise<Object>} Liste des trajets
   */
  async getTrajetsByTransporteur() {
    try {
      console.log('üöõ R√©cup√©ration des trajets du transporteur...');
      
      const response = await fetch(`${CONFIG.API_BASE_URL}/transporteur/trajets`, {
        method: 'GET',
        headers: this.getHeaders()
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajets r√©cup√©r√©s:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des trajets:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer un trajet par ID
   * @param {number} trajetId - ID du trajet
   * @returns {Promise<Object>} D√©tails du trajet
   */
  async getTrajetById(trajetId) {
    try {
      console.log(`üöõ R√©cup√©ration du trajet ${trajetId}...`);
      
      const response = await fetch(`${this.baseUrl}/${trajetId}`, {
        method: 'GET',
        headers: this.getHeaders()
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajet r√©cup√©r√©:', result);
      return result;

    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration du trajet ${trajetId}:`, error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un trajet
   * @param {number} trajetId - ID du trajet
   * @param {Object} updateData - Donn√©es √† mettre √† jour
   * @returns {Promise<Object>} Trajet mis √† jour
   */
  async updateTrajet(trajetId, updateData) {
    try {
      console.log(`üöõ Mise √† jour du trajet ${trajetId}...`, updateData);
      
      const response = await fetch(`${this.baseUrl}/${trajetId}`, {
        method: 'PUT',
        headers: this.getHeaders(),
        body: JSON.stringify(updateData)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajet mis √† jour:', result);
      return result;

    } catch (error) {
      console.error(`‚ùå Erreur lors de la mise √† jour du trajet ${trajetId}:`, error);
      throw error;
    }
  }

  /**
   * Supprimer un trajet (annulation logique)
   * @param {number} trajetId - ID du trajet
   * @returns {Promise<Object>} Confirmation de suppression
   */
  async deleteTrajet(trajetId) {
    try {
      console.log(`üöõ Suppression du trajet ${trajetId}...`);
      
      const response = await fetch(`${this.baseUrl}/${trajetId}`, {
        method: 'DELETE',
        headers: this.getHeaders()
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajet supprim√©:', result);
      return result;

    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression du trajet ${trajetId}:`, error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer tous les trajets publics (avec filtres)
   * @param {Object} filters - Filtres de recherche
   * @returns {Promise<Object>} Liste des trajets publics
   */
  async getAllTrajets(filters = {}) {
    try {
      console.log('üöõ R√©cup√©ration des trajets publics...', filters);
      
      const queryParams = new URLSearchParams();
      Object.keys(filters).forEach(key => {
        if (filters[key]) {
          queryParams.append(key, filters[key]);
        }
      });

      const url = queryParams.toString() 
        ? `${this.baseUrl}?${queryParams.toString()}`
        : this.baseUrl;
      
      // Essayer d'abord sans authentification (recherche publique)
      let response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      // Si 401, essayer avec authentification si disponible
      if (response.status === 401) {
        console.log('üîê Tentative avec authentification...');
        
        const token = sessionStorage.getItem('authToken');
        if (token) {
          response = await fetch(url, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          });
        }
      }

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `Erreur HTTP ${response.status}`);
      }

      console.log('‚úÖ Trajets publics r√©cup√©r√©s:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des trajets publics:', error);
      throw error;
    }
  }
}

// Instance globale
const trajetsApi = new TrajetsApi();

// Export pour compatibilit√© ES6 et script classique
if (typeof window !== 'undefined') {
  window.TrajetsApi = trajetsApi;
}

export default trajetsApi; 