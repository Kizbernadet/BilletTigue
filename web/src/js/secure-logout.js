/**
 * Module de d√©connexion s√©curis√©e
 * Centralise la logique de d√©connexion et nettoie compl√®tement toutes les donn√©es
 */

class SecureLogout {
    /**
     * Effectue une d√©connexion compl√®te et s√©curis√©e
     */
    static async performSecureLogout() {
        console.log('üîì D√©but de la d√©connexion s√©curis√©e...');
        
        try {
            // 1. Tenter la d√©connexion c√¥t√© serveur si on a un token
            await this.serverLogout();
        } catch (error) {
            console.warn('‚ö†Ô∏è D√©connexion serveur √©chou√©e, nettoyage local forc√©:', error.message);
        }
        
        // 2. Nettoyer compl√®tement toutes les donn√©es locales
        this.clearAllAuthData();
        
        // 3. Nettoyer les donn√©es de profil personnalis√©
        this.clearProfileData();
        
        // 4. Vider le cache du navigateur pour cette session
        this.clearSessionCache();
        
        console.log('‚úÖ D√©connexion s√©curis√©e termin√©e');
        
        // 5. Rediriger vers la page d'accueil avec un param√®tre pour √©viter la redirection automatique
        this.redirectToHome();
    }
    
    /**
     * Tente la d√©connexion c√¥t√© serveur
     */
    static async serverLogout() {
        const token = sessionStorage.getItem('authToken');
        
        if (!token) {
            console.log('üìù Aucun token trouv√©, d√©connexion locale uniquement');
            return;
        }
        
        try {
            const response = await fetch('/api/auth/logout', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                console.log('‚úÖ D√©connexion serveur r√©ussie');
            } else {
                throw new Error(`Erreur serveur: ${response.status}`);
            }
        } catch (error) {
            throw new Error(`D√©connexion serveur √©chou√©e: ${error.message}`);
        }
    }
    
    /**
     * Nettoie compl√®tement toutes les donn√©es d'authentification
     */
    static clearAllAuthData() {
        console.log('üßπ Nettoyage complet des donn√©es d\'authentification...');
        
        // Liste compl√®te de toutes les cl√©s possibles
        const authKeys = [
            'authToken',
            'userData',
            'user',
            'token',
            'userToken',
            'sessionToken',
            'refreshToken',
            'rememberMe',
            'loginData',
            'authData',
            'userProfile',
            'currentUser',
            'userSession'
        ];
        
        // Nettoyer sessionStorage
        authKeys.forEach(key => {
            if (sessionStorage.getItem(key)) {
                console.log(`üóëÔ∏è Suppression sessionStorage: ${key}`);
                sessionStorage.removeItem(key);
            }
        });
        
        // Nettoyer localStorage  
        authKeys.forEach(key => {
            if (localStorage.getItem(key)) {
                console.log(`üóëÔ∏è Suppression localStorage: ${key}`);
                localStorage.removeItem(key);
            }
        });
        
        // Nettoyer toutes les cl√©s li√©es √† l'auth (au cas o√π)
        for (let i = localStorage.length - 1; i >= 0; i--) {
            const key = localStorage.key(i);
            if (key && (key.includes('auth') || key.includes('user') || key.includes('token'))) {
                console.log(`üóëÔ∏è Suppression localStorage (pattern): ${key}`);
                localStorage.removeItem(key);
            }
        }
        
        for (let i = sessionStorage.length - 1; i >= 0; i--) {
            const key = sessionStorage.key(i);
            if (key && (key.includes('auth') || key.includes('user') || key.includes('token'))) {
                console.log(`üóëÔ∏è Suppression sessionStorage (pattern): ${key}`);
                sessionStorage.removeItem(key);
            }
        }
    }
    
    /**
     * Nettoie les donn√©es de profil personnalis√©
     */
    static clearProfileData() {
        console.log('üë§ Nettoyage des donn√©es de profil...');
        
        const profileKeys = [
            'redirectAfterLogin',
            'lastLoginType',
            'userPreferences',
            'dashboardData'
        ];
        
        profileKeys.forEach(key => {
            sessionStorage.removeItem(key);
        });
    }
    
    /**
     * Vide le cache de session
     */
    static clearSessionCache() {
        try {
            // Effacer l'historique de navigation pour cette session si possible
            if (window.history && window.history.replaceState) {
                window.history.replaceState(null, null, window.location.pathname);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de vider le cache de session:', error.message);
        }
    }
    
    /**
     * Redirige vers la page d'accueil avec s√©curit√©
     */
    static redirectToHome() {
        // Ajouter un timestamp pour √©viter le cache et la redirection automatique
        const timestamp = Date.now();
        const homeUrl = `../index.html?logout=${timestamp}`;
        
        console.log('üè† Redirection vers:', homeUrl);
        
        // Forcer le rechargement complet
        window.location.replace(homeUrl);
    }
    
    /**
     * V√©rification de s√©curit√© : s'assurer qu'aucune donn√©e sensible ne reste
     */
    static verifyCleanup() {
        const remainingKeys = [];
        
        // V√©rifier sessionStorage
        for (let i = 0; i < sessionStorage.length; i++) {
            const key = sessionStorage.key(i);
            if (key && (key.includes('auth') || key.includes('user') || key.includes('token'))) {
                remainingKeys.push(`sessionStorage: ${key}`);
            }
        }
        
        // V√©rifier localStorage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && (key.includes('auth') || key.includes('user') || key.includes('token'))) {
                remainingKeys.push(`localStorage: ${key}`);
            }
        }
        
        if (remainingKeys.length > 0) {
            console.warn('‚ö†Ô∏è Donn√©es sensibles encore pr√©sentes:', remainingKeys);
            return false;
        }
        
        console.log('‚úÖ V√©rification : toutes les donn√©es sensibles ont √©t√© supprim√©es');
        return true;
    }
    
    /**
     * D√©connexion d'urgence (si la d√©connexion normale √©choue)
     */
    static emergencyLogout() {
        console.warn('üö® D√©connexion d\'urgence activ√©e');
        
        // Vider compl√®tement les storages
        try {
            sessionStorage.clear();
            localStorage.clear();
        } catch (error) {
            console.error('‚ùå Impossible de vider les storages:', error);
        }
        
        // Redirection forc√©e
        window.location.replace('../index.html?emergency=true');
    }
    
    /**
     * M√©thode publique simplifi√©e pour d√©clencher la d√©connexion
     */
    static async logout() {
        try {
            await this.performSecureLogout();
        } catch (error) {
            console.error('‚ùå Erreur lors de la d√©connexion s√©curis√©e:', error);
            // En cas d'erreur, utiliser la d√©connexion d'urgence
            this.emergencyLogout();
        }
    }
}

// Export global
window.SecureLogout = SecureLogout; 